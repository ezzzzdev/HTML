
 문서 객체 모델(DOM, Document Object Model) 
: XML이나 HTML 문서에 접근하기 위한 일종의 인터페이스.

- 문서 내의 모든 요소를 정의
- 각각의 요소에 접근하는 방법을 제공함.
- W3C의 표준 객체 모델임

------------------------------------------------------------------------------------------------------------------------
▣ DOM 계층 구조

		                                [Document] - 노드 (Node)
		                                                 |
	                                     [html (Root Element)] - 노드 (Node)
		                                                |
       ------------------------------------------------------------------------------------------------------------
       |                              			  			                                                        |
[ head (Element)] - 노드 (Node)			                                                                [ body(Element) ] - 노드 (Node)
       |                                        	 			                                                         |
[ title (Element)]  - 노드 (Node)                                                [href (Attribute)]- [ a (Element) ]    [ div (Element)] - 노드 (Node)
       |						                                                                              |		       |
["제목" (Text) ]  - 노드 (Node)		                                                                [ "링크" (Text) ]    [ p (Element) ]	 - 노드 (Node)
									                                                                                            |
								                                                                                [ "내용" (Text) ] - 노드 (Node)

-------------------------------------------------------------------------------------------------------------------------
document 객체 : 웹 문서 자체를 의미하는 객체임.
-웹 페이지에 존재하는 HTML 요소에 접근하고자 할 때는, document 객체부터 시작해야 한다. 
(예외: 입력요소 객체 접근시는 form객체부터 접근 가능)
<form name="Frm">
    <input type = "text" name ="uid">
    <input type = "search" id = "searchBox">
</form>
아래와 같이 id, name 속성으로 불러올 수 있다.(단, class는 불가능)
--> Frm.uid.value="홍길동";
--> Frm.searchBox.value = "이름검색";



▣ document 객체에서 제공되는 메소드

===============================================================
1.  HTML 요소 선택 메소드 
===============================================================
document.getElementsByTagName("태그이름") 
: 해당 태그 이름의 요소를 모두 선택함. 배열로 반환

document.getElementById("아이디") : 해당 아이디의 요소를 선택함.
--> 아이디 속성은 하나만 가능하기 떄문에 Element 뒤에 s를 붙이지 않는다.

document.getElementsByClassName("클래스이름") 
: 해당 클래스에 속한 요소를 모두 선택함. 배열로 반환

document.getElementsByName("name속성값")	
: 해당 name 속성값을 가지는 요소를 모두 선택함. 배열로 반환

document.querySelectorAll("선택자") 
: 해당 선택자로 선택되는 요소를 모두 선택함.
---------------------------------------------------------------
*document.querySelectorAll() 메소드는 브라우저별로 지원 여부가 다름.



===============================================================
2.  HTML 요소의 생성
===============================================================
document.createElement("태그명") : 지정된 HTML 요소를 생성함.

document.write("텍스트"): html의 body태그 안에 html형식으로 데이터를 출력함.
*document.write("텍스트") 
: 페이지가 모두 로딩되기 전까지는 body태그 안에 차례로 출력
: 페이지가 모두 로딩된 후에는 innerHtml식으로 body태그 안에 출력

--> ()안의 두 노드는 둘이 형제노드이다.
--> 앞의 부모노드객체는 조상은 불가

부모노드객체.insertBefore(새로운자식노드, 기준자식노드) 
: 새로운 노드를 기준 자식 노드 바로 앞에 추가합니다. (형으로 추가)

부모노드객체.appendChild(새로운자식노드)
: 새로운 노드를 해당 노드의 자식 노드 리스트(child node list)의 맨 마지막에 추가

부모노드객체.removeChild(해당 자식 요소) 
: 자식 노드 리스트에서 특정 자식 노드를 제거

---------------------------------------------------------------


===============================================================
3.  HTML 이벤트 핸들러 추가 [모두 소문자로(권장) 또는 카멜식으로 기술 가능]
===============================================================
~~.onclick = function(){ 실행할 코드 } ;
: 마우스 클릭 이벤트와 연결될 이벤트 핸들러 코드를 추가함.
예시: document.getElementById("아이디").onclick = function(){ 실행할 코드 };
---------------------------------------------------------------
~~.onchange = function(){ 실행할 코드 } ;
: select태그의 option선택 값이 변경되거나, 값이 변경되는 이벤트와 연결될 핸들러 코드 추가.
---------------------------------------------------------------
~~.onsubmit = function(){ 실행할 코드 } ;
: submit이벤트가 실행될 때 연결될 이벤트 핸들러 코드를 추가함.
---------------------------------------------------------------
~~.onload = function(){ 실행할 코드 } ;
: 페이지가 로드될 때 연결될 이벤트 핸들러 코드를 추가함. **즉시실행함수 중 하나
window.onload = function(){ 실행할 코드 } ;
---------------------------------------------------------------


===============================================================
4. HTML 객체의 선택
===============================================================
document.forms :<form>요소를 모두 반환함. 배열형식으로 반환함
document.images	: <img>요소를 모두 반환함. 배열형식으로 반환함

-> 배열 형식으로 반환하기 때문에 index 번호로 반환함.

document.readyState 
: HTML 문서의 로딩 상태(loading status)를 반환함.

**비동기처리시 사용
---------------------------------------------------------------
동기식 : 페이지 이동
비동기식 : 내가 원하는 것은 바뀌면서 페이지 이동은 없는 것.

===============================================================
BOM(Browser Object Model) : 브라우저 객체 모델
===============================================================
: 브라우저(창)에 관련된 정보에 접근 또는 기능 제어등을 처리할 수
있도록 제공되는 객체
대표적인 객체 : window, screen등이 있다.
W3C에서 표준으로 지정된 객체는 아님.
===============================================================